/*
The basic routine is:-

- On the touch start phase, record the position and the time and set a boolean value to say that a swipe might be happening.

- Each frame during the drag phase, check that the finger doesn't stray too far from a straight line (horizontal or vertical, depending on the swipe type). If it does stray, cancel the boolean flag to denote it isn't a swipe.

- On the end phase, again, record the time and position and subtract the initial time and position. If the time is greater than the maximum swipe time or the distance is less than the minimum swipe distance, or the boolean flag is false then it's not a swipe. Otherwise, it is.

Annoyingly, I can't test the following code on a device at the moment, but it should at least give you an idea. This is for a vertical swipe, but you can get a horizontal swipe by changing touch.position.y for touch.position.x, etc.
Code (csharp):
*/
var startTime: float;
var startPos: Vector2;
var couldBeSwipe: boolean;
var comfortZone: float;
var minSwipeDist: float;
var maxSwipeTime: float;
 
 
function Update() {
  if (iPhoneInput.touchCount > 0) {
    var touch = iPhoneInput.touches[0];

    switch (touch.phase) {
      case iPhoneTouchPhase.Began:
        couldBeSwipe = true;
        startPos = touch.position;
        startTime = Time.time;
        break;

      case iPhoneTouchPhase.Moved:
        if (Mathf.Abs(touch.position.y - startPos.y) > comfortZone) {
          couldBeSwipe = false;
        }
        break;

      case iPhoneTouchPhase.Stationary:
        couldBeSwipe = false;
        break;

      case iPhoneTouchPhase.Ended:
        var swipeTime = Time.time - startTime;
        var swipeDist = (touch.position - startPos).magnitude;

        if (couldBeSwipe  (swipeTime < maxSwipeTime)  (swipeDist > minSwipeDist)) {
          // It's a swiiiiiiiiiiiipe!
          var swipeDirection = Mathf.Sign(touch.position.y - startPos.y);

          // Do something here in reaction to the swipe.
        }
        break;
    }
  }
}