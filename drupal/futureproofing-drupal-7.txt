## User Interface
  Spark Distribution

  navbar:
    Responsive navigation bar
  admin_select: 
    set menu type per role (navbar and admin menu)
  quickedit:
    inline content editing
  ckeditor:
    the official wysiwyg editor
  responsive_bartik:
    responsive version of bartik theme
  elements, html5_tools:
    html5 tags and functionalities
  admin_views:
    views powered administration
  views_bulk_operations:
    do bulk operation on content
  views_responsive_grid:
    makes responsive the views default grid style
  responsive_tables:
    makes responsive the views default table style (uses priorities per column)
  breakpoints:
    sets breakpoints for responsive design
  picture:
    for responsive pictures
  joyride:
    for creation of in app tutorials
  instantfilter:
    basic module filter (lightweight alternative to module_filter)
  simplified_menu_admin
    simplifies edit menu administration
  escape_admin
    adds back to site link (goes to the last visited visitor site page)
  caption_filter
    adds html image captions for wysiwyg editors
  bean
    custom blocks with fields
  multiblock
    use same block into different regions

## Field types
  entityreference
    for referencing entities
  telephone
    for telephone fields
  email
    for email fields
  date

## Backend
  uuid
    support of uuids
  render_cache, entity_modified
    caches entities fields rendered

## For Developers
  ## External PHP libraries
    composer_vendor, composer_manager
    composer (getcomposer.org)
      for managing external auto loadable libraries
      Usage:
        1) declare a composer.json file
          e.g:  sites/all/composer.json
                {
                  "require":{
                    "fale/isbn": "1.x-dev"
                  }
                }
        2) run composer install
        3) inside module
          require_once DRUPAL_ROOT.'/sites/all/vendor/autoload.php';//autoload is the file generated by composer
          $result = \Isbn\Check::is10($isbn);
  ## API and Plugins
    ## Alternatives
      ## Using Hooks (he doesn't prefer this)
        function example_mymodule_hook_info(){
          $info['example'] = array(
            'label' => t('Example Implementation'),
            'callback' => 'example_mymodule_callback',
            'settings form' => 'example_mymodule_form',
          );
          return $info;
        }
      ## Using CTools Plugins (too complicated)
        function example_ctools_plugin_directory($module, $plugin){
          if($module == 'mymodule' && $plugin == 'hook'){
            return "plugins/$module/$plugin";
          }
        }

        //plugins/example/hook/example_implementation.inc
        $plugin = array(
          'title' => t('example implementation'),
          'class' => 'ExampleMyModuleHookImplementation',
        );

        //plugins/example/hook/ExampleImplementation.class.php
        class ExampleMyModuleHookImplementation{
          //do stuff
        }
      ## His way
        //lib/MyModuleHookPluginInterface.php
        class MyModuleHookPluginInterface{
          public static function getInstance($config = array());
          public function getDefaults();
          public function doSomething($config);
        }

        //lib/MyModuleHookPluginBase.php
        abstract class MyModuleHookPluginBase extends MyModuleHookPluginInterface{
          public static function getInstance($config = arra()){
            $class = get_called_class();
            return new $class($config);
          }

          public function getDefaults(){
            return array();
          }

          abstract public function doSomething();
        }

        //example.module
        function example_mymodule_hook_info(){
          $info['example'] = aray(
            'label' => t('example implemantation'),
            'class' => 'ExampleMyModuleHookPlugin',
          );
          return $info;
        }

        //example.info
        files[] = lib/ExampleMyModuleHookPlugin.php

        //lib/ExampleMyModuleHookPlugin.php
        class ExampleMyModuleHookPlugin extends MyModuleHookPluginBase{
          public function doSomething(){
            //Do stuff
          }
        }

## The other stuff
  entity_view_mode
    content type display styles like functionality for views
  configuration
    experimental configuration module (better use features...)
  migrate, migrate_d2d
    for migrations

## RESTful web services
  restws, github.com/Gizra/restful (instead of services)
## Translation
  entity_translation, title

## Distribution with most of these modules
  pred8

## Stop Using These Modules (drupal.org/node/2116417)
  blog module
  dashboard
  design test
  garland theme
  number
  list
  openid
  overlay
  php filter
  poll
  profile
  trigger