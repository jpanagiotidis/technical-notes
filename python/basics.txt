## Comments
	# this is a python comment
	'''
		This
		is a
		multiline
		comment
	'''

## Interactive mode
	on interactive mode the _ is the last printed expression

## Do something if the script isn't imported
	if __name__=="__main__":
		do_something()

## Get user input
	person = input('Enter your name: ')
	print('Hello', person)

## Numbers
	powers:
		**
		example:
			2**8 #equals 256
	floor division:
		//
		example:
			5//4 #equals 1

## Strings
	## Get character at
		word[index]
			(negative numbers can be also used)
	## Substring
		word[startIndex:endIndex]
			(startIndex is included, endIndex isnt included)
			(if startIndex is ommited then the substring starts from the start of the original word)
			(if endIndex is ommited then the substring ends to the end of the original word)
	## Get length
		len(word)

## Flow Control
	## if example
		if x < 0:
			print('aaa');
		elif x == 1:
			print('bbb');
		else:
			print('ccc');

## Functions
	def func_name(argA, ...):
		some_command;
		...
		return;

## String to int
	int('12')

## int to string
	str(12)

## Add python script to crontab
	choose python version
	get python path using which
		eg:
			which python3.2
			results into '/usr/bin/python32'

	* * * * * /usr/bin/python32 /path/to/script.py

## *args and **kwargs
	The *args and **kwargs is a common idiom to allow arbitrary number of arguments to functions as described in the section more on defining functions in the Python documentation.

	The *args will give you all function parameters as a tuple:

	In [1]: def foo(*args):
	   ...:     for a in args:
	   ...:         print a
	   ...:
	   ...:

	In [2]: foo(1)
	1


	In [4]: foo(1,2,3)
	1
	2
	3
	The **kwargs will give you all keyword arguments except for those corresponding to a formal parameter as a dictionary.

	In [5]: def bar(**kwargs):
	   ...:     for a in kwargs:
	   ...:         print a, kwargs[a]
	   ...:
	   ...:

	In [6]: bar(name="one", age=27)
	age 27
	name one
	Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:

	def foo(kind, *args, **kwargs):
	   pass
	An other usage of the *l idiom is to unpack argument lists when calling a function.

	In [9]: def foo(bar, lee):
	   ...:     print bar, lee
	   ...:
	   ...:

	In [10]: l = [1,2]

	In [11]: foo(*l)
	1 2
	In Python 3 it is possible to use *l on the left side of an assignment (Extended Iterable Unpacking):

	first, *rest = [1,2,3,4]
	first, *l, last = [1,2,3,4]
